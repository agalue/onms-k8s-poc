Installing kubectl/minikube/helm on Ubuntu 22.04 LTS

If virtualized, make sure virtual cpu extensions are passed through to guest

Externally configure PostgreSQL [if not using containerized PostgreSQL]
curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/pgdg.gpg
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
sudo apt update
sudo apt install postgresql-15
In /etc/postgresql/##/main, reconfigure pg_hba.conf to allow external access to 192.168.0.0/24 and change postgresql.conf to listen on all interfaces.
Follow doc instructions to install database.
Database name needs to be <instance name>_opennms and not just opennms where <instance name> is the name of the pod.

Setting up and installing kubectl
sudo apt install -y ca-certificates cur
sudo curl -fsSLo /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubectl

Verifying virtualization features and installing virtualization engine
sudo apt install cpu-checker
kvm-ok
sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager

Download, install, configure brew and then install helm and k9s
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
(echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"') >> /home/USERNAME/.profile
sudo apt-get install build-essential
brew install gcc helm derailed/k9s/k9s

Download and installing minikube
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
sudo dpkg -i minikube_latest_amd64.deb

Add your user account to virtualization groups to be able to run virtualization commands without elevating permissions
sudo adduser `id -un` libvirt
sudo adduser `id -un` kvm

Edit the main configuration file
sudo vi /etc/libvirt/libvirtd.conf

Set the UNIX domain socket group ownership to libvirt by uncommenting the following line. In other words, remove the #.
unix_sock_group = "libvirt"

Set the UNIX socket permissions for the R/W socket by uncommenting the following line and setting the correct permissions.
unix_sock_rw_perms = "0770"

sudo reboot

Just to get the initial stuff downloaded for minikube
minikube start
minikube stop
minikube delete

Or download the zip at https://github.com/opennms-forge/onms-k8s-poc/archive/refs/heads/main.zip and unzip

Navigating to the onms-k8s-poc directory, starting minikube with adequate resources, starting Horizon through Helm, and then enabling the ingress
cd onms-k8s-poc

minikube start --memory=6144 --cpus=2
😄  minikube v1.29.0 on Ubuntu 22.04 (kvm/amd64)
✨  Automatically selected the kvm2 driver. Other choices: qemu2, ssh
👍  Starting control plane node minikube in cluster minikube
🔥  Creating kvm2 VM (CPUs=2, Memory=6144MB, Disk=20000MB) ...
🐳  Preparing Kubernetes v1.26.1 on Docker 20.10.23 ...
    ▪ Generating certificates and keys ...
    ▪ Booting up control plane ...
    ▪ Configuring RBAC rules ...
🔗  Configuring bridge CNI (Container Networking Interface) ...
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
🔎  Verifying Kubernetes components...
🌟  Enabled addons: default-storageclass, storage-provisioner
🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

helm upgrade --install -f minimal-resources.yaml -f kill-it-with-fire.yaml -f minikube-host-postgresql.yaml -f bare-bones.yaml --set domain=domain.com uonms ./opennms
Release "uonms" does not exist. Installing it now.
NAME: uonms
LAST DEPLOYED: Thu Mar 30 23:21:59 2023
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
Thank you for installing OpenNMS 31.0.5.

Your release is named "uonms", used for:
- Customer/Deployment identifier.
- The namespace for all the resources.
- The sub-domain for the ingress controller.
- The OpenNMS instance ID for your Minions (prefix for Kafka topics).
- Prefix for Elasticsearch indices.
- Prefix for PostgreSQL database names.
- Prefix for Kafka consumer groups.

Resources URLs:
OpenNMS Core: https://onms-core.uonms.domain.com/opennms/login.jsp

To learn more about the release, try:

$ helm status uonms
$ helm get all uonms
$ kubectl get all -n uonms

minikube addons enable ingress
💡  ingress is an addon maintained by Kubernetes. For any concerns contact minikube on GitHub.
You can view the list of minikube maintainers at: https://github.com/kubernetes/minikube/blob/master/OWNERS
    ▪ Using image registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343
    ▪ Using image registry.k8s.io/ingress-nginx/controller:v1.5.1
    ▪ Using image registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343
🔎  Verifying ingress addon...
🌟  The 'ingress' addon is enabled